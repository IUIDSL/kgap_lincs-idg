install.packages("data.table")
install.packages("dplyr")
q()
1276+914
q()
drv <- JDBC("org.apache.derby.jdbc.EmbeddedDriver","/Users/oleg/Applications/derby/lib/derby.jar", identifier.quote="\"")
library(RJDBC)
library(dplyr)
library(ggplot2)
drv <- JDBC("org.apache.derby.jdbc.EmbeddedDriver","/Users/oleg/Applications/derby/lib/derby.jar", identifier.quote="\"")
conn <- dbConnect(drv, "jdbc:derby:/Users/oleg/Documents/dbase/drugdb/.config/localdb/db")
clogp <- dbGetQuery(conn,"select clogp value,'cLogP' prop from structures,atc_ddd where clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
mw <- dbGetQuery(conn,"select cd_molweight value,'MW' prop from structures,atc_ddd where clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
hac <- dbGetQuery(conn,"select O_N value,'HAC' prop from structures,atc_ddd where clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
hdo <- dbGetQuery(conn,"select OH_NH value,'HDO' prop from structures,atc_ddd where clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
dbDisconnect(conn)
dbUnloadDriver(drv)
rm(conn)
rm(drv)
df <- bind_rows(clogp, mw, hac, hdo)
df$PROP <- factor(df$PROP, levels = c("MW", "cLogP", "HAC", "HDO"), ordered = T)
View(df)
df.sum <- df %>% group_by(PROP) %>% summarize(min = quantile(value)[1], q1 = quantile(value)[2], median = quantile(value)[3], q3 = quantile(value)[4], max = quantile(value)[5])
head(df)
df.sum <- df %>% group_by(PROP) %>% summarize(min = quantile(VALUE)[1], q1 = quantile(VALUE)[2], median = quantile(VALUE)[3], q3 = quantile(VALUE)[4], max = quantile(VALUE)[5])
View(df.sum)
q()
library(RJDBC)
library(dplyr)
library(ggplot2)
drv <- JDBC("org.apache.derby.jdbc.EmbeddedDriver","/Users/oleg/Applications/derby/lib/derby.jar", identifier.quote="\"")
conn <- dbConnect(drv, "jdbc:derby:/Users/oleg/Documents/dbase/drugdb/.config/localdb/db")
clogp <- dbGetQuery(conn,"select clogp value,'cLogP' prop from structures,atc_ddd where clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
mw <- dbGetQuery(conn,"select cd_molweight value,'MW' prop from structures,atc_ddd where cd_molweight is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
hac <- dbGetQuery(conn,"select O_N value,'HAC' prop from structures,atc_ddd where O_N is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
hdo <- dbGetQuery(conn,"select OH_NH value,'HDO' prop from structures,atc_ddd where OH_NH is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
rotb <- dbGetQuery(conn,"select ROTB value,'ROTB' prop from structures,atc_ddd where ROTB is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
ring <- dbGetQuery(conn,"select RNG_COUNT value,'RINGS' prop from structures,atc_ddd where RNG_COUNT is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
rgb <- dbGetQuery(conn,"select RGB value,'RGB' prop from structures,atc_ddd where RGB is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
dbDisconnect(conn)
dbUnloadDriver(drv)
rm(conn)
rm(drv)
library(RJDBC)
library(dplyr)
library(ggplot2)
drv <- JDBC("org.apache.derby.jdbc.EmbeddedDriver","/Users/oleg/Applications/derby/lib/derby.jar", identifier.quote="\"")
conn <- dbConnect(drv, "jdbc:derby:/Users/oleg/Documents/dbase/drugdb/.config/localdb/db")
clogp <- dbGetQuery(conn,"select clogp value,'cLogP' prop from structures,atc_ddd where clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
mw <- dbGetQuery(conn,"select cd_molweight value,'MW' prop from structures,atc_ddd where cd_molweight is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
hac <- dbGetQuery(conn,"select O_N value,'HAC' prop from structures,atc_ddd where O_N is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
hdo <- dbGetQuery(conn,"select OH_NH value,'HDO' prop from structures,atc_ddd where OH_NH is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
rotb <- dbGetQuery(conn,"select ROTB value,'ROTB' prop from structures,atc_ddd where ROTB is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
ring <- dbGetQuery(conn,"select RNG_COUNT value,'RINGS' prop from structures,atc_ddd where RNG_COUNT is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
rgb <- dbGetQuery(conn,"select RGB value,'RGB' prop from structures,atc_ddd where RGB is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
dbDisconnect(conn)
dbUnloadDriver(drv)
rm(conn)
rm(drv)
df$PROP <- factor(df$PROP, levels = c("MW", "cLogP", "HAC", "HDO","ROTB","RINGS", "RGB"), ordered = T)
df <- bind_rows(clogp, mw, hac, hdo, rotb, ring, rgb)
df$PROP <- factor(df$PROP, levels = c("MW", "cLogP", "HAC", "HDO","ROTB","RINGS", "RGB"), ordered = T)
df.sum <- df %>% group_by(PROP) %>% summarize(min = quantile(VALUE)[1], q1 = quantile(VALUE)[2], median = quantile(VALUE)[3], q3 = quantile(VALUE)[4], max = quantile(VALUE)[5])
View(df.sum)
drv <- JDBC("org.apache.derby.jdbc.EmbeddedDriver","/Users/oleg/Applications/derby/lib/derby.jar", identifier.quote="\"")
conn <- dbConnect(drv, "jdbc:derby:/Users/oleg/Documents/dbase/drugdb/.config/localdb/db")
clogp <- dbGetQuery(conn,"select clogp value,'cLogP' prop from structures,atc_ddd where clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
mw <- dbGetQuery(conn,"select cd_molweight value,'MW' prop from structures,atc_ddd where cd_molweight is not null and clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
hac <- dbGetQuery(conn,"select O_N value,'HAC' prop from structures,atc_ddd where O_N is not null and clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
hdo <- dbGetQuery(conn,"select OH_NH value,'HDO' prop from structures,atc_ddd where OH_NH is not null and clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
rotb <- dbGetQuery(conn,"select ROTB value,'ROTB' prop from structures,atc_ddd where ROTB is not null and clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
ring <- dbGetQuery(conn,"select RNG_COUNT value,'RINGS' prop from structures,atc_ddd where RNG_COUNT is not null and clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
rgb <- dbGetQuery(conn,"select RGB value,'RGB' prop from structures,atc_ddd where RGB is not null and clogp is not null and structures.id=atc_ddd.struct_id and atc_ddd.route = 'O'")
dbDisconnect(conn)
dbUnloadDriver(drv)
rm(conn)
rm(drv)
df <- bind_rows(clogp, mw, hac, hdo, rotb, ring, rgb)
df$PROP <- factor(df$PROP, levels = c("MW", "cLogP", "HAC", "HDO","ROTB","RINGS", "RGB"), ordered = T)
df.sum <- df %>% group_by(PROP) %>% summarize(min = quantile(VALUE)[1], q1 = quantile(VALUE)[2], median = quantile(VALUE)[3], q3 = quantile(VALUE)[4], max = quantile(VALUE)[5])
View(df.sum)
df[1, ]
df.sum[1, ]
round(df.sum[1, ],2)
round(df.sum[1, ])
df.sum[1, ]
df.sum[1, 2:]
df.sum[1, 2:end()]
df.sum[1, 2:ncols(df.sum)]
ncol(df.sum)
df.sum[1, 2:ncol(df.sum)]
round(df.sum[1, 2:ncol(df.sum)],2)
round(df.sum[2, 2:ncol(df.sum)],2)
q()
update.packages()
q()
library(dev)
install.packages("devtools")
q()
install.packages("devtools")
remove.packages("curl")
remove.packages("devtools")
install.packages("devtools")
library("devtools")
devtools::install_github("ropenhealth/openfda")
install.packages("curl")
devtools::install_github("ropenhealth/openfda")
library("openfda")
patient_ages <- fda_query("/drug/event.json") %>% fda_count("patient.patientonsetage") %>% fda_exec()
library("ggplot2")
patient_ages
ggplot(patient_ages, aes(x = term, y = count)) + geom_point()
patient_ages <- fda_query("/drug/event.json") %>% fda_api_key("oF9m5MtczHWjLlIIMOXwRsvyHfq8VEUcxzT1ExC4") %>% fda_count("patient.patientonsetage") %>% fda_exec()
View(patient_ages)
?fda_exec
?`openfda-package`
q()
ct <- matrix(c(3921,138287,22320,164528))
ct
ct <- matrix(c(3921,138287,22320,164528), nrow = 2)
ct
ct <- matrix(c(3921,138287,22320,164528), nrow = 2, byrow = F)
ct
ct <- matrix(c(3921,138287,22320,164528), nrow = 2, byrow = T)
ct
fisher.test(ct)
install.packages("exact2x2")
library(exact2x2)
fisher.exact(ct)
ct
ct[1]
ct[1,2]
ct[1,1]
ct[1,1]*ct[2,2]
(ct[1,1]*ct[2,2])/(ct[1,2]*ct[2,1])
q()
ct <- matrix(c(24942,588349,36803,650094), nrow = 2, byrow = F)
ct
ct <- matrix(c(24942,588349,36803,650094), nrow = 2, byrow = T)
ct
fisher.test(ct)
ct <- matrix(c(24942,588349,36803,4641255), nrow = 2, byrow = T)
fisher.test(ct)
ct <- matrix(c(3921,138287,22320,5126821), nrow = 2, byrow = T)
ct
fisher.test(ct)
q()
install.packages("rhdf5")
source("https://bioconductor.org/biocLite.R")
biocLite("rhdf5")
update.packages()
q()
c(1, "test")
q()
q()
q()
pert_id
paste0("a",".tsv")
sprintf()
?sprintf
q()
q()
update.packages()
q()
update.packages()
q()
x1 <- rnorm(10, 5)
x1
x2 <- rnbinom(15,2)
x2 <- rnorm(15,2)
x2
median(x1)
median(x2)
median(c(median(x1),median(x2)))
median(c(x1,x2))
q()
update.packages()
data(SOTU)
install.packages("wordcloud")
install.packages("tm")
data("SOTU")
library(wordcloud)
library(tm)
data("SOTU")
SOTU
SOTU <- tm_map(SOTU,function(x)removeWords(tolower(x),stopwords()))
wordcloud(SOTU, colors=brewer.pal(6,"Dark2"),random.order=FALSE)
SOTU
remove.packages("wordcloud")
remove.packages("tm")
require(devtools)
install_github("lchiffon/wordcloud2")
library(wordcloud2)
wordcloud2(data = demoFreq)
head(demoFreq)
p <- wordcloud2(data=demoFreq)
q()
library(ontologyIndex)
data(go)
library(ontologySimilarity)
data(gene_GO_terms)
data(GO_IC)
beach <- gene_GO_terms[c("LRBA", "LYST", "NBEA", "NBEAL1", "NBEAL2", "NSMAF", "WDFY3", "WDFY4", "WDR81")]
beach
class(beach)
lapply(beach, length)
ll <- lapply(beach, length)
ll[1]
ll[[1]]
ll>2
ll>3
beach[ll>3]
q()
update.packages()
update.packages()
q()
data(segmentationData)
library(pacman)
p_load("rpart","rattle","rpart.plot","party","partykit")
data(segmentationData)
install.packages("rattle", repos="http://rattle.togaware.com")
p_load(tidyr)
install.packages("RGtk2")
install.packages("RGtk2")
install.packages("RGtk2", type="binary")
install.packages("RGtk2", type="binary")
install.packages("RGtk2", repos="http://www.ggobi.org/r")
install.packages("RGtk2", repos="http://www.ggobi.org/r")
install.packages("RGtk2", repos="http://www.ggobi.org/r")
install.packages("rpart.plot")
install.packages("rpart.plot")
library(rpart.plot)
data(segmentationData)
library(rpart)
data(segmentationData)
install.packages("caret")
library(caret)
data("segmentationData")
data <- segmentationData[,-c(1,2)]
data
head(data)
form <- as.formula(Class ~ .)
form
tree.1 <- rpart(form,data=data,control=rpart.control(minsplit=20,cp=0))
plot(tree.1)
text(tree.1)
prp(tree.1)
prp(tree.1,varlen=3)
new.tree.1 <- prp(tree.1,snip=TRUE)$obj
prp(new.tree.1)
tree.2 <- rpart(form,data)
prp(tree.2)
fancyRpartPlot(tree.2)
install.packages("RGtk2", depen=T)
q()
2299-116
update.packages()
update.packages()
q()
q()
library(GO.db)
source("https://bioconductor.org/biocLite.R")
biocLite()
library(GO.db)
?BiocUpgrade
biocLite("BiocUpgrade")
q()
q()
update.packages()
q()
update.packages()
update.packages()
library(data.table)
remove.packages("data.table")
q()
install.packages("data.table")
library(data.table)
q()
q()
q()
update.packages()
update.packages()
q()
remove.packages("ChemmineR")
remove.packages("ChemmineR")
remove.packages("rcdk")
remove.packages("rcdk")
library(devtools)
install_github("cambDI/camb/camb")
install_github("cambDI/camb/camb")
devtools::install_github("zachcp/cdk-depict")
devtools::install_github("zachcp/depict")
library(depict)
library(magrittr)
library(grid)
library("depict", help=T)
lsp <- function(package, all.names = FALSE, pattern)
{
package <- deparse(substitute(package))
ls(
pos = paste("package", package, sep = ":"),
all.names = all.names,
pattern = pattern
)
}
lsp("depict")
lsp(depict)
mol <- parse_smiles("COC1=C(OCCO)C=CC(\C=C\C(O)=O)=C1")
mol <- parse_smiles("COC1=C(OCCO)C=CC(\\C=C\\C(O)=O)=C1")
depiction() %>%set_size(400, 400) %>%  get_image() %>% grid::grid.raster()
depict(mol = mol)
?depict
depict(mol, molfile="example1.png",zoom=4)
library(magrittr)
depiction() %>%set_size(400, 400) %>%  get_image() %>% grid::grid.raster()
library(grid)
depiction() %>%set_size(400, 400) %>%  get_image() %>% grid::grid.raster()
color <- J("java.awt.Color")
depiction() %>%
highlight_atoms(atms, color$LIGHT_GRAY) %>%
highlight_atoms(bnds, color$LIGHT_GRAY) %>%
highlight_atoms(lactam, color$RED) %>%
set_size(400, 400) %>%
set_zoom(3) %>%
outerglow() %>%
depict(pen) %>%
get_image() %>%
grid::grid.raster()
pen  <- parse_smiles("CC1(C(N2C(S1)C(C2=O)NC(=O)CC3=CC=CC=C3)C(=O)[O-])C")
atms <- pen$atoms()
bnds <- pen$bonds()
lactam <- match_smarts("C1(=O)NCC1", pen)
depiction() %>%
highlight_atoms(atms, color$LIGHT_GRAY) %>%
highlight_atoms(bnds, color$LIGHT_GRAY) %>%
highlight_atoms(lactam, color$RED) %>%
set_size(400, 400) %>%
set_zoom(3) %>%
outerglow() %>%
depict(pen) %>%
get_image() %>%
grid::grid.raster()
library(rJava)
q()
install.packages("Rcpp")
install.packages("testthat")
install.packages("XML")
Sys.setenv(RDBASE="/usr/local/Cellar/rdkit/2016.03.3")
Sys.setenv(RDBASE="/usr/local/Cellar/rdkit/2016.03.3", LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/Cellar/rdkit/2016.03.3/lib")
library(devtools)
install_github("pauca/rrdkit/rrdkit")
install_github("pauca/rrdkit/rrdkit")
install_github("pauca/rrdkit/rrdkit")
install_github("pauca/rrdkit/rrdkit")
q()
update.packages()
update.packages()
q()
update.packages()
q()
plot(cars)
q()
install.packages("jsonlite")
update.packages()
q()
q()
install.packages("rhdf5")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite("rhdf5")
library(rhdf5)
setwd("Documents/dbase/lincs/l1ktools/R/cmap/")
source("io.R")
fn <- "/Users/oleg/Documents/dbase/lincs/GSE70138/GSE70138_Broad_LINCS_Level5_COMPZ_n118050x12328_2017-03-06.gctx"
cols <- read.gctx.ids(fn, dimension = "col")
cols
class(cols)
dim(col)
dim(cols)
ids <- cols[1:100]
ids
g <- parse.gctx(fn, cid = ids)
g
g@rid
g@rdesc
g@cdesc
g@version
g@src
g@mat
dim(g@mat)
length(g@rid)
length(g@rdesc)
g@rdesc
class(g@rdesc)
g@rdesc[,1]
str(g@rdesc)
colnames(g@mat)
rownames(g@mat)
library(data.table)
dt <- as.data.table(g@mat, keep.rownames = T)
dt
getwd()
for(i in seq(1, 12, 5))
)
seq(1,12,5)
args <- fn
args
cols <- read.gctx.ids(args[1], dimension = "col")
class(cols)
length(cols)
idx <- 1:12
idx
for(i in seq(1,length(idx), 5)) {}
for(i in seq(1,length(idx), 5)) { cat(idx[i:i+5]) }
i
idx[i:i+5]
i <- 1
idx[i:i+5]
idx[1:2]
i
idx[i:(i+5)]
idx[i:(i+5-1)]
cols
cols <- cols[1:12]
cols
for(i in seq(1, length(cols), 5)) {
end <- i + 1000 - 1
if(end > length(cols)) {
end <- length(cols)
}
ids <- cols[i:end]
print(ids)
}
for(i in seq(1, length(cols), 5)) {
end <- i + 5 - 1
if(end > length(cols)) {
end <- length(cols)
}
ids <- cols[i:end]
print(ids)
}
cols
batch <- 1000
cols <- read.gctx.ids(args[1], dimension = "col")
i <- 1
end <- i + batch - 1
end
ids <- cols[i:end]
g <- parse.gctx(fn, cid = ids)
dt <- as.data.table(g@mat, keep.rownames = T)
dt
View(dt)
View(dt)
dt <- melt(dt, id.vars = "rn", variable.name = "sign_id", value.name = "zscore", na.rm = T)
dt
q()
